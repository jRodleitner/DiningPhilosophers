GENERAL TODO:

NEXT:
[ ] distribution webpage min/max
[ ] Display Philosopher names in svg
[ ] Dijkstra Simple Simulation Logic
[ ] try simplifying animation/ simulation page
[ ] normal simulation string for animation
[ ] explanations of algorithms lead to Simulation page?
[ ] inspect simulation logic for each Algorithm!!!
[ ] other simulation type: currStatus check
[ ] overwork statistics to facilitate eliminating the PICKUP-Blocking Times



AND FINALLY: (...HOW EVEN...AHHH...)
[ ] chandy misra

WIP:

SIMULATION:

OPTIONALS:
TIMEOUT(Time-index)
[-] make static classes objects!
[-] arbitrator ????
[!] intelligent waiter ???

Completed:

CHECK:
[x] Think times: deterministisch, Normalverteilt, exponentialverteilt, Intervall
[x] Simulation Framework
[x] Asymmetric
[x] Hierarchy
[x] Timeout
[x] Token
[x] pickupWAITER (SIMPLE ARBITRATOR)
[x] atomicWaiter (SIMPLE ARBITRATOR)
[x] table-semaphore
[x] ROUND-ROBIN
[x] FAIR WAITER
[x] Fill in Simulation Blanks
[x] tanenbaum solution
[x] fair tanenbaum solution [!RECKECK!]
[x] dijkstra [!RECHECK!] {very slim chance of deadlock if the randomized sleep times overlap}
[x] multiple token [!RECHECK!]
[x] restrict nr philosophers [!RECHECK!]
[x] multiple waiters (Two-Waiters) [CHECK]
[x] GitHub Incoropration
[x] Basic Simulation Page
[x] Basic Website
[x] timeout parameter in servlet!!!
[x] return to home button simulation page
[x] second simulation type to only display eat think and blocked times!
[x] svg animation concept
[x] svg animation prototype of Dining Philosophers
[x] remove blocked times and other actions at pickup/putdown times -> change statistics to run over ArrayLists
[x] incorporate simulation to animation
[x] make Simulation Page functional again!
[x] Backwards/ Forwards option


DONE:
[x] Naive


IDEAS:

    Totmannverfahren: separate program entity preventing deadlocks.

    Animation: SVG animation using the text-field and the arrows!!!

    INTELLIGENT WAITER: SAVE LIST OF PHILOSOPHGERS REQUESTING TO EAT AND CHECK FOR EACH IN THE LIST WHETHER
    the two adjacent ones are free and allow them to eat. If permission is granted then one philosopher in the circle must be skipped
    (WAITER UPDATES STATUS)

    FAIR WAITER: (Increment eat times... assign rights to philosopher with the least amounts of eats)
    FORK SEMAPHORE:
    Dijkstra's solution using semaphores:
    Assign a semaphore to each chopstick, representing its availability.
    Philosophers must acquire both chopsticks by locking their corresponding semaphores.
    If a philosopher cannot acquire both chopsticks, they release the acquired chopstick and wait before trying again.