GENERAL TODO:

NEXT:
[ ] Correct restrict implementation (Semaphores)
[ ] check all algorithms
[ ] Server deployment
[ ] read approaches/ papers for new algorithms
[ ] try simplifying animation/ simulation page
[ ] inspect simulation logic for each Algorithm!!!



AND FINALLY: (...HOW EVEN...AHHH...)

WIP:

SIMULATION:

OPTIONALS:
TIMEOUT(Time-index)
[-] make static classes objects!
[-] arbitrator ????
[!] intelligent waiter ???
[ ] Separate Events for: Timeout, Waiter etc...?? (Animation)
[ ] other simulation type: currStatus check
Completed:

CHECK:
[x] Think times: deterministisch, Normalverteilt, exponentialverteilt, Intervall
[x] Simulation Framework
[x] Asymmetric
[x] Hierarchy
[x] Timeout
[x] Token
[x] pickupWAITER (SIMPLE ARBITRATOR)
[x] atomicWaiter (SIMPLE ARBITRATOR)
[x] table-semaphore
[x] ROUND-ROBIN
[x] FAIR WAITER
[x] Fill in Simulation Blanks
[x] tanenbaum solution
[x] fair tanenbaum solution [!RECKECK!]
[x] dijkstra [!RECHECK!] {very slim chance of deadlock if the randomized sleep times overlap}
[x] multiple token [!RECHECK!]
[x] restrict nr philosophers [!RECHECK!]
[x] multiple waiters (Two-Waiters) [CHECK]
[x] GitHub Incoropration
[x] Basic Simulation Page
[x] Basic Website
[x] timeout parameter in servlet!!!
[x] return to home button simulation page
[x] second simulation type to only display eat think and blocked times!
[x] svg animation concept
[x] svg animation prototype of Dining Philosophers
[x] overwork statistics to facilitate eliminating the PICKUP-Blocking Times
[x] remove blocked times and other actions at pickup/putdown times -> change statistics to run over ArrayLists
[x] incorporate simulation to animation
[x] make Simulation Page functional again!
[x] Backwards/ Forwards option
[x] Display Philosopher names in svg
[x] Dijkstra Simple Simulation Logic
[x] distribution webpage min/max different for distributions
[x] determine default values: normal and exp
[x] exp function overhaul
[x] normal simulation string for animation
[x] remove static data classes and static functions
[x] fix hierarchy/ asymmetric fillIn function!!!
[x] enhance fillIn performance
[x] algorithm description skeleton
[x] Correct simple simulation logic -> lastAction
[x] explanations of algorithms lead to Simulation page?
[x] Statistics overhaul: concurrency index, fairness index
[x] Intelligent Pickup Waiter
[x] Fair waiter -> use eat times
[x] Improve Fair Tanenbaum
[x] Naive
[x] chandy misra
[x] classic Waiter solution
[x] modify fair tanenbaum
[x] Test minimum sleep time (eating, thinking)
[x] Fair Tanenbaum code/description
[x] Incidence graphs (Algorithms)


21.10
[ ] Simulation notes
[ ] Animation Notes




Algorithm [descriptions]|[pseudocode]|[evaluations]:
1.  [x][x][x] Naive
2.  [x][x][x] Hierarchy
3.  [x][x][x] Asymmetric
4.  [x][x][x] Timeout
5.  [ ][ ][ ] Restrict
6.  [x][x][x] Global Token
7.  [x][x][x] Multiple Token
8.  [x][x][x] Atomic Waiter
9.  [x][x][x] Pickup Waiter
10. [x][x][x] Intelligent Pickup Waiter
11. [x][x][x] Fair Waiter (Eat Chance)
12. [x][x][x] Fair Waiter (Eat Time)
13. [x][x][x] Two Waiters
14. [x][x][x] Table Semaphore
15. [x][x][x] tanenbaum
16. [x][x][x] fair_tanenbaum (Eat Chance)
17. [x][x][x] fair_tanenbaum (Eat Time)
18. [x][x][x] chandy-misra
19. [x][_][ ] Restrict Waiter
20. [x][x][?] dijkstra (Instant timeout)
????:



NEXT:



FINALLY:
22. [ ][ ] paper-solution
23. [ ][ ] paper-solution
24. [ ][ ] paper-solution

IDEAS:

    Poor Philosopher??

    Totmannverfahren: separate program entity preventing/ checking for deadlocks.

    Animation: SVG animation using the text-field and the arrows!!!

    FORK SEMAPHORE:
    Dijkstra's solution using semaphores:
    Assign a semaphore to each chopstick, representing its availability.
    Philosophers must acquire both chopsticks by locking their corresponding semaphores.
    If a philosopher cannot acquire both chopsticks, they release the acquired chopstick and wait before trying again.